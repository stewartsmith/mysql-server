MYSQL_STORAGE_ENGINE(falcon, falcon, [Falcon Storage Engine],
        [Transactional tables using Falcon], [max,max-no-ndb])
MYSQL_PLUGIN_DIRECTORY(falcon, [storage/falcon])
MYSQL_PLUGIN_STATIC(falcon,    [libfalcon.a])
MYSQL_PLUGIN_DYNAMIC(falcon,   [ha_falcon.la])

# Check if we have the atomic_* functions on Solaris
AC_CHECK_FUNC(atomic_cas_32, AC_DEFINE([HAVE_SOLARIS_ATOMIC], [1], [Define to 1 if Solaris support atomic functions.]))

# Check for supported machine types.
AC_CACHE_CHECK([if Falcon Storage Engine is supported on $MACHINE_TYPE],
  			   falcon_cv_supported_by_machine,[
  case "$BASE_MACHINE_TYPE" in
    i386)   falcon_cv_supported_by_machine="yes" ;;
    amd64)  falcon_cv_supported_by_machine="yes" ;;
    x86_64) falcon_cv_supported_by_machine="yes" ;;
    powerpc)falcon_cv_supported_by_machine="yes" ;;
    sparc)
      AC_LINK_IFELSE(
        [AC_LANG_PROGRAM([[
#include <stdlib.h>
volatile int target= 0;
int compare= 1;
int exchange= 2;
      ]],[[
#if defined(__SUNPRO_C) || defined(__SUNPRO_CC)
  /* When compiling with Sun Studio compiler we use the Solaris atomic 
     functions if they are available. These were first introduced in 
     Solaris 10. */
#if defined(HAVE_SOLARIS_ATOMIC)
  return 0;
#else 
  /* If the atomic functions are not available we use our own assembly
     implementation for these. These are implemented using Sun Studio's
	 inline assembly templates which is only supported by Sun Studio 12
	 and newer versions (compiler version 5.9 or newer). */
#if (__SUNPRO_C) >= 0x590 || (__SUNPRO_CC >= 0x590)
  return 0;  
#else
  /* Fail if we do not have the atomic functions and the Sun Studio version
     is older that Sun Studio 12. */
#error To compile Falcon with Sun Studio for Solaris on SPARC we need either Solaris 10 or newer or Sun Studio 12 or newer
#endif
#endif /* HAVE_SOLARIS_ATOMIC */
#else
  /* Use gcc style inline assembly when compiling with gcc */
  char ret;
  __asm__ __volatile__ (
	  "membar #LoadLoad | #LoadStore | #StoreLoad | #StoreStore\n\t"
	  "cas [%2],%0,%1\n\t"
	  "cmp %0,%1\n\t"
	  "be,a 0f\n\t"
	  "mov 1,%0\n\t"		/* one insn after branch always executed */
	  "clr %0\n\t"
	  "0:\n\t"
	  : "=r" (ret), "+r" (exchange)
	  : "r" (&target), "0" (compare)
	  : "memory", "cc"
	  )
#endif /* !__SUNPRO_C && !__SUNPRO_CC */
        ]])],
        [falcon_cv_supported_by_machine="yes"],
        [falcon_cv_supported_by_machine="no"])
      ;;
    *) falcon_cv_supported_by_machine="no" ;;
  esac
])

if test "$falcon_cv_supported_by_machine" != "yes"; then
  mysql_plugin_falcon="no"
  with_plugin_falcon="no"
fi

# Generate Makefile for TransformLib.
MYSQL_PLUGIN_ACTIONS(falcon,[
  AC_CONFIG_FILES(storage/falcon/TransformLib/Makefile)

  AC_LANG_PUSH([C++])
  ac_save_CXXFLAGS="$CXXFLAGS"
  AC_CACHE_CHECK([compiler flag to enable implicit templates],
                 falcon_cv_cxx_enable_implicit_templates,[
    CXXFLAGS="$ac_save_CXXFLAGS -fimplicit-templates"
    AC_LINK_IFELSE([AC_LANG_PROGRAM()],
      falcon_cv_cxx_enable_implicit_templates="-fimplicit-templates"
    )
  ])

  # -lstdc++ really shouldn't be here, and is only required while we continue
  # to use gcc to link C++ code for the static linking hack.  Once we stop
  # doing that it should be removed from here, and the CXXLDFLAG setting below
  # will do the right thing for g++.
  AC_CACHE_CHECK([compiler flag to enable exceptions],
                 falcon_cv_cxx_enable_exceptions,[
    m4_foreach([cxxflag], [[-fexceptions -lstdc++], [-features=except]],[
      CXXFLAGS="$ac_save_CXXFLAGS cxxflag"
      AC_LINK_IFELSE([AC_LANG_PROGRAM()],
        falcon_cv_cxx_enable_exceptions="cxxflag"
      )
    ])
  ])

  AC_CACHE_CHECK([linker flag to enable STL],
                 falcon_cv_cxx_enable_stl,[
    m4_foreach([cxxflag], [-lstdc++],[
      CXXFLAGS="$ac_save_CXXFLAGS cxxflag"
      AC_LINK_IFELSE([AC_LANG_PROGRAM()],
        falcon_cv_cxx_enable_stl="cxxflag"
      )
    ])
  ])

  AC_CACHE_CHECK([compiler flag to silence offsetof warnings],
                 falcon_cv_cxx_no_invalid_offsetof,[
    CXXFLAGS="$ac_save_CXXFLAGS -Wno-invalid-offsetof"
    AC_LINK_IFELSE([AC_LANG_PROGRAM()],
      falcon_cv_cxx_no_invalid_offsetof="-Wno-invalid-offsetof"
    )
  ])

  # Falcon uses exceptions and STL.
  CXXLDFLAGS="$CXXLDFLAGS $falcon_cv_cxx_enable_stl"
  FALCON_CXXFLAGS="$falcon_cv_cxx_no_invalid_offsetof $falcon_cv_cxx_enable_implicit_templates $falcon_cv_cxx_enable_exceptions"
  case "$with_debug" in
    yes)  FALCON_CXXFLAGS="$FALCON_CXXFLAGS -D_DEBUG" ;;
    full) FALCON_CXXFLAGS="$FALCON_CXXFLAGS -D_DEBUG -DMEM_DEBUG" ;;
  esac

  AC_SUBST([FALCON_CXXFLAGS])

  # Check that C++ exceptions works in an executable by actually running a
  # compiled program and throwing and catching an exception
  CXXFLAGS=$FALCON_CXXFLAGS
  AC_CACHE_CHECK([if compiler and compiler options support C++ exceptions for Falcon],
	            falcon_cv_supported_by_compiler,[
    AC_RUN_IFELSE(
      [AC_LANG_PROGRAM([],[[
      try {
        throw 1;
      }
      catch (int) {
        return 0;
      }
      return -1;
      ]])],
      [falcon_cv_supported_by_compiler="yes"],
      [falcon_cv_supported_by_compiler="no"],
      [falcon_cv_supported_by_compiler="yes"]) dnl For cross compiling, assume it works
  ])

  if test "$falcon_cv_supported_by_compiler" != "yes"; then
    echo "Falcon must be compiled with support for C++ exceptions enabled."
    echo "Please adjust your compiler flags or disable support for Falcon (--without-plugin-falcon)."
    exit 1
  fi

  CXXFLAGS=$ac_save_CXXFLAGS
  AC_LANG_POP([C++])

  # When compiling with Sun Studio compiler on SPARC assembly code for
  # Interlock operations needs to be included. This has been implemented
  # as "inline templates" in a separate file
  FALCON_SPARC_ASSEMBLY=""
  case $host in
    sparc-sun-solaris2.9)
      case $CXX_VERSION in
        *Sun*C++*)
          FALCON_SPARC_ASSEMBLY="CompareAndSwapSparc.il"
          ;;
      esac
      ;;
  esac

  AC_SUBST([FALCON_SPARC_ASSEMBLY])
])
