#
# This test is testing backup and restore of database objects.
#
# The following objects are tested:
# - tables
# - views
# - stored procedures and functions
# - triggers
# - events
#
# It is also tested that backup and restore works correctly when there are
# dependencies between objects such as:
# - one table depends on another table via foreign key constraint,
# - a view depends on a table or another view,
# - stored routine or event refers to another object.

--source include/have_innodb.inc
--source include/not_embedded.inc
--source include/have_myisam_or_maria_default.inc

# Note: BACKUP crashes server when InnoDB engine is used and views are 
# included in the image (see BUG#34758). Until this issue is resolved we 
# can't use InnoDB engine here and thus define table dependencies using 
# foreign key constraints.
#
# If tables use MyISAM storage engine the test works but all foreign
# key constraints are silently ignored. When BUG#34758 is fixed, 
# "SET storage_engine=InnoDB;" should be added just below
# to make InnoDB the default storage engine so that
# handling of dependencies introduced by foreign keys can also be tested.
#
# Note that there is a separate test backup_fkey testing foreign key
# constraints.

##############################################################
--echo 
--echo Starting Test - Backup
--echo 
##############################################################

let $MYSQLD_DATADIR=`select @@datadir`;

--error 0,1
--remove_file $MYSQLD_DATADIR/bup_objects.bak

# Set SQL_MODE and client charset
--echo Setting SQL_MODE = PIPES_AS_CONCAT
SET SQL_MODE = 'PIPES_AS_CONCAT';

--echo Change client connection charset
SET character_set_client = 'latin2';

# Create database and objects for this test and tailor it to the test.
--disable_warnings
DROP DATABASE IF EXISTS db1;
DROP DATABASE IF EXISTS db2;
--enable_warnings

CREATE DATABASE db1;
CREATE DATABASE db2;

# Create functions and procedures. Note that they operate on tables and
# views defined below and also call each other.

delimiter ||;

CREATE PROCEDURE db1.p11()
BEGIN
  UPDATE db2.t21 SET b = (SELECT b FROM db1.v11 WHERE a = 1);
  SELECT db2.f21(7);
END;
||

CREATE FUNCTION db2.f21(a int) RETURNS INTEGER
BEGIN
  RETURN a;
END;
||

CREATE PROCEDURE db2.p21()
BEGIN
  CALL db1.p11();
  SELECT x.a FROM v22 as x, db1.t13 as y WHERE x.b = y.a; 
END;
||

delimiter ;||

# Create tables which refer to each other with foreign keys.

CREATE TABLE db1.t11(a int, primary key (a));
CREATE TABLE db1.t12(a int, b int, foreign key (b) references db1.t11(a));
CREATE TABLE db2.t21(a int, b int, primary key(a), foreign key (b) references db1.t11(a));
CREATE TABLE db1.t13(a int, b int, foreign key (b) references db2.t21(a));

# Create views with non-trivial dependencies. 
#
# Notes:
#
# - It is important that each database contains a view which depends on a view from the
#   other one. Thanks to that the correct order of restoring these views is non-trivial
#   and mixes views from different databases. If, for example, we would first create 
#   views from one database and then from the other one we would always get a failure 
#   regardless of the order in which databases are processed.
#
# - Views use the function defined above to check that this is handled correctly.

CREATE VIEW db1.v12 AS SELECT * FROM db2.t21;
CREATE VIEW db2.v22 AS SELECT * FROM db1.t12;
CREATE VIEW db1.v11 AS SELECT db2.f21(x.a) AS a, y.b FROM db2.v22 AS x, db1.t13 AS y WHERE x.b = y.a;
CREATE VIEW db2.v21 AS SELECT x.b, db2.f21(y.a) AS a FROM db1.v11 AS x, db2.v22 AS y WHERE x.a = y.b;

# The dependencies between views are as follows:
#
#      v11 ------- t13
#    /   \  v12 -- t21  
# v21     \
#    \_____ v22 __ t12
#
# Therefore they must be created in such order: v22,v11,v21 (position of v12
# is arbitrary). Grouping them by database or restoring in alphabetical order would not
# work.

# Create other types of objects

delimiter ||;

CREATE TRIGGER db1.tr11 AFTER DELETE ON db1.t11 FOR EACH ROW 
BEGIN
  DELETE FROM db2.t1 WHERE a > 1;
END;
||

CREATE TRIGGER db2.tr21 AFTER DELETE ON db2.t21 FOR EACH ROW 
BEGIN
  DELETE FROM db1.t2 WHERE a > 1;
END;
||

CREATE EVENT db1.e11 ON SCHEDULE EVERY 1 YEAR DO
  DELETE FROM db2.t21 WHERE b > 100;
||
  
CREATE EVENT db2.e21 ON SCHEDULE EVERY 1 YEAR DO
  DELETE FROM db1.t12 WHERE b > 100;
||

delimiter ;||

# insert some data

SET foreign_key_checks = 1;
SHOW VARIABLES LIKE 'foreign_key_checks%';

INSERT INTO db1.t11 VALUES (1),(2),(3);
INSERT INTO db1.t12 VALUES (3,1), (2,2), (1,3);
INSERT INTO db2.t21 VALUES (100,1), (200,2);
INSERT INTO db1.t13 VALUES (1,200), (2,100);

# Check what is in views

SELECT * FROM db1.v11;
SELECT * FROM db1.v12;
SELECT * FROM db2.v21;
SELECT * FROM db2.v22;

# Backup and restore everything.
--echo Backup databases.
--replace_column 1 #
BACKUP DATABASE db1, db2 TO 'bup_objects.bak';

--echo Dropping databases.
DROP DATABASE db1;
DROP DATABASE db2;

# Set SQL_MODE and client charset
--echo Setting SQL_MODE = ''
SET SQL_MODE = '';

--echo Change client connection charset
SET character_set_client = 'latin1';

--replace_column 1 #
RESTORE FROM 'bup_objects.bak';

# See that all objects have been restored

SHOW TABLES IN db1;
SHOW TABLES IN db2;
--query_vertical SHOW TRIGGERS IN db1;
--query_vertical SHOW TRIGGERS IN db2;
--replace_column 9 #
--query_vertical SHOW EVENTS IN db1;
--replace_column 9 #
--query_vertical SHOW EVENTS IN db2;
--replace_column 5 # 6 #
--query_vertical SHOW PROCEDURE STATUS WHERE Db='db1' OR Db='db2';
--replace_column 5 # 6 #
--query_vertical SHOW FUNCTION STATUS WHERE Db='db1' OR Db='db2';

# Show the data and CREATE statements
--echo Showing objects and create statements.
--query_vertical SHOW CREATE DATABASE db1;
--query_vertical SHOW CREATE TABLE db1.t13;
--query_vertical SHOW CREATE TABLE db2.t21;
--query_vertical SHOW CREATE VIEW db1.v11;
--query_vertical SHOW CREATE VIEW db2.v21;
--query_vertical SHOW CREATE PROCEDURE db1.p11;
--query_vertical SHOW CREATE FUNCTION db2.f21;
--query_vertical SHOW CREATE TRIGGER db2.tr21;

SELECT * FROM db1.v11;
SELECT * FROM db1.v12;
SELECT * FROM db2.v21;
SELECT * FROM db2.v22;

--echo Cleanup
DROP DATABASE db1;
DROP DATABASE db2;
--remove_file $MYSQLD_DATADIR/bup_objects.bak
