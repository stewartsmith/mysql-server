--source include/not_embedded.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

# Check that BACKUP/RESTORE commands correctly report errors 
# and are updated in backup history and progress logs

--disable_warnings
DROP DATABASE IF EXISTS adb;
DROP DATABASE IF EXISTS bdb;
--error 0,1
--remove_file $MYSQLTEST_VARDIR/master-data/test.bak
--enable_warnings

# non-existent backup archive
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--replace_regex /Errcode: [0-9]+/Errcode: #/
--error 29
RESTORE FROM 'test.bak';

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "RESTORE FROM 'test%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

CREATE DATABASE adb;
CREATE DATABASE bdb;
CREATE TABLE bdb.t1(a int) ENGINE=MEMORY;

# invalid location
--error ER_BAD_PATH
BACKUP DATABASE adb TO '';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE adb TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

# don't overwrite existing files
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--replace_regex /Errcode: [0-9]+/Errcode: #/
--error 1
BACKUP DATABASE adb TO "bdb/t1.frm";
--replace_column 2 #
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--replace_regex /Errcode: [0-9]+/Errcode: #/
SHOW WARNINGS;

--replace_column 1 #
BACKUP DATABASE adb TO "test.bak";
--replace_column 2 #
# Reenable when bug#41468 has been fixed. There should not be warnings
#SHOW WARNINGS;

# don't overwrite existing backup image
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--replace_regex /Errcode: [0-9]+/Errcode: #/
--error 1
BACKUP DATABASE adb TO "test.bak";
--replace_column 2 #
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--replace_regex /Errcode: [0-9]+/Errcode: #/
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE adb TO%";

--echo verify backup history and progress logs for backup_state.
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--remove_file $MYSQLTEST_VARDIR/master-data/test.bak

# non-existent database
--disable_warnings
DROP DATABASE IF EXISTS foo;
DROP DATABASE IF EXISTS bar;
--enable_warnings

-- error ER_BAD_DB_ERROR
BACKUP DATABASE foo TO 'test.bak';
--replace_column 2 #
SHOW WARNINGS;

-- error ER_BAD_DB_ERROR
BACKUP DATABASE test,foo,bdb,bar TO 'test.bak';
--replace_column 2 #
SHOW WARNINGS;

# repeated database
-- error ER_NONUNIQ_DB
BACKUP DATABASE foo,test,bar,foo TO 'test.bak';

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE test,foo,bdb,bar TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation,backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

# Test that BACKUP/RESTORE statements are disable inside stored routines,
# triggers and events.

use adb;

create table t1 (a int);

--error ER_SP_BADSTATEMENT
create procedure p1() backup database test to 'test.bak';
--error ER_SP_BADSTATEMENT
create procedure p1() restore from 'test.bak';

--error ER_SP_BADSTATEMENT
create function f1() returns int backup database test to 'test.bak';
--error ER_SP_BADSTATEMENT
create function f1() returns int restore from 'test.bak';

--error ER_SP_BADSTATEMENT
create trigger tr1 before insert on t1 
for each row backup database test to 'test.bak';
--error ER_SP_BADSTATEMENT
create trigger tr1 before insert on t1 
for each row restore from 'test.bak';

--error ER_SP_BADSTATEMENT
create event ev1 on schedule every 1 day 
do backup database test to 'test.bak';
--error ER_SP_BADSTATEMENT
create event ev1 on schedule every 1 day 
do restore from 'test.bak';

# TODO: fix error injection and test more errors

DROP DATABASE adb;
DROP DATABASE bdb;

# Note: the file should be removed - if it is not, the following command
# will fail and we will be warned that something is wrong with the test
--error 1
--remove_file $MYSQLTEST_VARDIR/master-data/test.bak

# Check error conditions for including mysql and information_schema in
# the list of databases.
#
# There are several scenarios:
# 1) BACKUP DATABASE mysql TO 't.bak'
#    Error: Nothing to backup
# 2) BACKUP DATABASE information_schema TO 't.bak'
#    Error: Nothing to backup
# 3) BACKUP DATABASE mysql, information_schema TO 't.bak'
#    Error: Nothing to backup
# 4) BACKUP DATABASE mysql, test TO 't.bak'
#    Warning: Backup cannot include database 'mysql'
# 5) BACKUP DATABASE information_schema, test TO 't.bak'
#    Warning: Backup cannot include database 'information_schema'
# 6) BACKUP DATABASE mysql, information_schema, test TO 't.bak'
#    Warning: Backup cannot include database 'mysql'
#    Warning: Backup cannot include database 'mysql'

# Scenario 1
--echo Backup of mysql, information_schema scenario 1
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE mysql TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE mysql TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak

# Scenario 2
--echo Backup of mysql, information_schema scenario 2
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE information_schema TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE information_schema TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT  notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak

# Scenario 3
--echo Backup of mysql, information_schema scenario 3
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE mysql, information_schema TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE mysql, information_schema TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak

# Scenario 4
--echo Backup of mysql, information_schema scenario 4
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE mysql, test TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE mysql, test TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak

# Scenario 5
--echo Backup of mysql, information_schema scenario 5
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE information_schema, test TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak

# Scenario 6
--echo Backup of mysql, information_schema scenario 6
--error ER_BACKUP_CANNOT_INCLUDE_DB
BACKUP DATABASE mysql, information_schema, test TO 't.bak';
--replace_column 2 #
SHOW WARNINGS;

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE mysql, information_schema, test TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

--error 0, 1
--remove_file $MYSQLTEST_VARDIR/master-data/t.bak
#
# BUG#33352 - Test for presence of online backup progress tables;
#

# Make backup copies of the tables first.
--echo Making copies of progress tables.
CREATE TABLE IF NOT EXISTS test.ob_copy LIKE mysql.backup_history;
CREATE TABLE IF NOT EXISTS test.obp_copy LIKE mysql.backup_progress;

# Create a database and put some data in it.
CREATE DATABASE test_ob_error;
CREATE TABLE test_ob_error.t1 (col_a int);
INSERT INTO test_ob_error.t1 VALUES (1), (2), (3), (4), (5);

# Backup the database to ensure db is ok.
--echo Backup the database;
--replace_column 1 #
BACKUP DATABASE test_ob_error TO 'ob_err.bak';
--remove_file $MYSQLTEST_VARDIR/master-data/ob_err.bak

# Drop one of the tables and try a backup.
DROP TABLE mysql.backup_history;

# Try to backup the database (should be error).
--echo Backup the database;
--error ER_BACKUP_PROGRESS_TABLES
BACKUP DATABASE test_ob_error TO 'ob_err.bak';
--error 0,1
--remove_file $MYSQLTEST_VARDIR/master-data/ob_err.bak
--replace_column 2 #
SHOW WARNINGS;

# Restore the table
--echo Restoring the table
CREATE TABLE mysql.backup_history LIKE test.ob_copy;
DROP TABLE test.ob_copy;

# Drop one of the tables and try a backup.
DROP TABLE mysql.backup_progress;

# Try to backup the database (should be error).
--echo Backup the database;
--error ER_BACKUP_PROGRESS_TABLES
BACKUP DATABASE test_ob_error TO 'ob_err.bak';

--error 0,1
--remove_file $MYSQLTEST_VARDIR/master-data/ob_err.bak
--replace_column 2 #
SHOW WARNINGS;

# Restore the table
--echo Restoring the table
CREATE TABLE mysql.backup_progress LIKE test.obp_copy;
DROP TABLE test.obp_copy;

DROP DATABASE test_ob_error;

--echo
--echo Bug#38624
--echo Test that backup fails with error if database files are removed 
--echo after backup starts

SET DEBUG_SYNC= 'reset';

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);

connection con1;

--disable_warnings
DROP DATABASE IF EXISTS db1;

CREATE DATABASE db1;

connection con2;

--echo start backup but stop just before adding metadata to backup image
SET DEBUG_SYNC= 'backup_before_write_preamble SIGNAL running WAIT_FOR db_will_fail';

send BACKUP DATABASE db1 TO 'bup_db1.bak';

connection con1;

SET DEBUG_SYNC='now WAIT_FOR running';

--echo delete database files so that check_db_dir_exists will fail in 
--echo si_objects.cc @ DatabaseObj::do_serialize

--remove_file $MYSQLTEST_VARDIR/master-data/db1/db.opt
--rmdir $MYSQLTEST_VARDIR/master-data/db1

SET DEBUG_SYNC='now SIGNAL db_will_fail';

connection con2;
--echo Database has been deleted, backup will fail
--error ER_BACKUP_GET_META_DB
reap;

--echo
--echo Test that backup fails with error if a table used by 
--echo a trigger cannot be opened

SET DEBUG_SYNC= 'reset';

connection con1;

--disable_warnings
DROP DATABASE IF EXISTS db1;

CREATE DATABASE db1;
CREATE TABLE db1.t1 (i int);
CREATE TABLE db1.t2 (v varchar (20));

DELIMITER ||;
CREATE TRIGGER db1.trg AFTER INSERT ON db1.t1 FOR EACH ROW
BEGIN
  INSERT INTO db1.t2(v) VALUES ('Test trigger fired');   
END;||
DELIMITER ;||

SET DEBUG_SYNC= 'reset';

--echo Setting debug point that will make backup fail when adding the
--echo trigger metadata

SET SESSION DEBUG='+d,backup_fail_add_trigger';
--error ER_BACKUP_GET_META_TRIGGER
BACKUP DATABASE db1 TO 'bup_db1.bak';

--echo Get last backup_id
SELECT MAX(backup_id) INTO @bup_id FROM mysql.backup_history
WHERE command LIKE "BACKUP DATABASE db1 TO%";

--echo verify backup history and progress logs:
SELECT backup_state,operation, backup_file FROM mysql.backup_history
     WHERE backup_id=@bup_id;
SELECT notes FROM mysql.backup_progress
     WHERE backup_id=@bup_id;

SET DEBUG_SYNC= 'reset';
DROP DATABASE db1;

--echo
--echo Done testing for Bug#38624

--echo
--echo Testing RESTORE ... OVERWRITE functionality
--echo See bug#34579
--echo

--source include/not_embedded.inc

--echo Initialize
CREATE DATABASE db1;
USE db1;
CREATE TABLE table1 (text VARCHAR(20));
INSERT INTO table1 VALUES ('Inserted before');

--echo
--echo Backup database
--replace_column 1 #
BACKUP DATABASE db1 TO 'overwrite.bak';

--echo
--echo Insert more data and display
INSERT INTO table1 VALUES ('Inserted after');
SELECT * FROM table1;

--echo
--echo Restore without OVERWRITE flag; will fail
--error ER_RESTORE_DB_EXISTS
RESTORE FROM 'overwrite.bak';

--echo
--echo Restore with OVERWRITE flag; will succeed
--replace_column 1 #
RESTORE FROM 'overwrite.bak' OVERWRITE;

--echo
--echo Show that inserted value 2 is not there
SELECT * FROM table1;

DROP DATABASE db1;

--echo
--echo Restore after deleting db; will succeed
--replace_column 1 #
RESTORE FROM 'overwrite.bak';
--echo
--echo Show that inserted value 2 is not there
SELECT * FROM table1;

--echo #
--echo # Test error handling by backup code when injecting commit blocker error.
--echo #

SET SESSION DEBUG='+d,backup_grl_fail';
--error ER_BACKUP_SYNCHRONIZE
BACKUP DATABASE db1 TO 'overwrite1.bak';
SET SESSION DEBUG='-d';

--echo

SET SESSION DEBUG='+d,backup_grl_block_commit_fail';
--error ER_BACKUP_SYNCHRONIZE
BACKUP DATABASE db1 TO 'overwrite1.bak';
SET SESSION DEBUG='-d';

--echo
DROP DATABASE db1;

