#  BUG#40611: MySQL cannot make a binary log after sequential number beyond 
#             unsigned long.
# 
#  Problem statement
#  =================
#
#    Extension for log file names might be created with negative 
#    numbers (when counter used would wrap around), causing server 
#    failure when incrementing -00001 (reaching number 000000 
#    extension).
#
#  Test
#  ====
#    This tests aims at testing the a patch that removes negatives 
#    numbers from log name extensions and checks that the server 
#    reports gracefully that the limit has been reached.
#
#    It instruments index file to point to a log file close to
#    the new maximum and calls flush logs to get warning.
#

source include/have_log_bin.inc;
RESET MASTER;

let $MYSQLTEST_DATADIR= `select @@datadir`;

let DATADIR= $MYSQLTEST_DATADIR;

###############################################
# check hitting maximum file name extension:
###############################################

# Stop master server
--echo **** Stop master server ****
--write_file $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
wait
EOF
--shutdown_server 10
--source include/wait_until_disconnected.inc

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
perl;

my $index_file= $ENV{'DATADIR'} . "/master-bin.index";
my $bin_file= $ENV{'DATADIR'} . "/master-bin.000001";
my $bin_long_file= $ENV{'DATADIR'} . "/master-bin.2147483646";

print("INDEX: $index_file\n");
print("BINLOG: $bin_file\n");
print("RENAMED BINLOG: $bin_long_file\n");

use File::Copy;
copy($bin_file, $bin_long_file) or die "File cannot be copied.";

open (F, ">>$index_file");
print F "./master-bin.2147483646\n";
close F;
print("WROTE into index file last entry: ./master-bin.2147483646\n");

EOF

--echo **** ReStart master server ****
--append_file $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
restart
EOF
--enable_reconnect
--source include/wait_until_connected_again.inc

# should throw warning
FLUSH LOGS;

RESET MASTER;
