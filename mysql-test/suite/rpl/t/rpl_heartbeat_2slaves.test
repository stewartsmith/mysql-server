#############################################################
# Author: Serge Kozlov <Serge.Kozlov@Sun.COM>
# Date:   02/19/2009
# Purpose: Testing heartbeat for schema
# 1 master and 2 slaves
#############################################################
--source include/master-slave.inc
--echo

--echo *** Preparing ***
--connection master
let $binlog_file= query_get_value(SHOW MASTER STATUS, File, 1);
--connection slave
--echo [on slave]
--source include/stop_slave.inc
RESET SLAVE;
--replace_result $MASTER_MYPORT MASTER_PORT $binlog_file MASTER_BINLOG
eval CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=$MASTER_MYPORT, MASTER_USER='root', MASTER_HEARTBEAT_PERIOD=0.1, MASTER_LOG_FILE='$binlog_file';
--source include/start_slave.inc
--disconnect slave1
--connect(slave1,127.0.0.1,root,,test,$SLAVE_MYPORT1,)
--connection slave1
--echo [on slave1]
RESET SLAVE;
--replace_result $MASTER_MYPORT MASTER_PORT $binlog_file MASTER_BINLOG
eval CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=$MASTER_MYPORT, MASTER_USER='root', MASTER_HEARTBEAT_PERIOD=1, MASTER_LOG_FILE='$binlog_file';
--source include/start_slave.inc
--echo

#
# Testing heartbeat
#

# Check that heartbeat events sent to both slaves with correct periods
--echo *** 2 slaves ***
--connection slave
let $status_var= slave_received_heartbeats;
let $status_var_value= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
let $status_var_comparsion= >;
--source include/wait_for_status_var.inc
--echo Slave has received heartbeat event
--connection slave1
let $status_var= slave_received_heartbeats;
let $status_var_value= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
let $status_var_comparsion= >;
--source include/wait_for_status_var.inc
let $slave1_rcvd_heartbeats= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
--echo Slave1 has received heartbeat event
--connection slave
let $slave_rcvd_heartbeats= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
let $result= query_get_value(SELECT ($slave_rcvd_heartbeats DIV $slave1_rcvd_heartbeats) > 1 AS Result, Result, 1);
--echo Slave has received more heartbeats than Slave1 (1 means 'yes'): $result
--echo

# First slave doesn't receive data from master because it masked by --replicate-ignore-db.
# Second slave receives data. Check that the 1st can receive heartbeat.
--echo *** Master->heartbeat->Slave   Master->data->Slave1: ***
--connection master
--echo [on master]
CREATE DATABASE test_slave1;
USE test_slave1;
CREATE TABLE t1 (a INT PRIMARY KEY, b VARCHAR(10), c LONGTEXT);
INSERT INTO t1 VALUES (1, 'on master', '');
--sync_slave_with_master
--echo [on slave]
SHOW DATABASES LIKE 'test_slave1';
--connection slave1
--sync_with_master
--echo [on slave1]
SHOW DATABASES LIKE 'test_slave1';
--source include/stop_slave.inc
--connection master
--echo [on master]
--echo creating 1000 updates in binlog
# Generate events for binlog on master
let $i= 1000;
let $j= 1;
--disable_query_log
while ($i) {
  eval SET @c_text=REPEAT('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890', 1000+$j);
  eval UPDATE t1 SET a=$j, c=@c_text;
  dec $i;
  inc $j;
}
--enable_query_log
save_master_pos;
let $binlog_pos= query_get_value(SHOW MASTER STATUS, Position, 1);
--connection slave1
--echo [on slave1]
START SLAVE;
let $slave_param= Read_Master_Log_Pos;
let $slave_param_value= query_get_value(SHOW SLAVE STATUS, Read_Master_Log_Pos, 1);
let $slave_param_comparison= >;
--source include/wait_for_slave_param.inc
--connection slave
let $slave_rcvd_heartbeats_before= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
--connection slave1
let $slave_param= Read_Master_Log_Pos;
let $slave_param_value= $binlog_pos;
let $slave_param_comparison= =;
--source include/wait_for_slave_param.inc
--connection slave
let $slave_rcvd_heartbeats_after= query_get_value(SHOW STATUS LIKE 'slave_received_heartbeats', Value, 1);
--connection slave1
--sync_with_master
--echo [on slave1]
USE test_slave1;
SELECT a FROM t1;
--connection slave
--echo [on slave]
let $result= query_get_value(SELECT ($slave_rcvd_heartbeats_after - $slave_rcvd_heartbeats_before) > 5 AS Result, Result, 1);
--echo Slave has received heartbeats (1 means 5 or more heartbeat events): $result
--echo

#
# Clean up
#
--echo *** Clean up ***
--connection master
DROP DATABASE test_slave1;
--sync_slave_with_master
--connection slave1
--sync_with_master
--echo

# End of 6.0 test
--echo End of 6.0 test
